Read the code below, and then select the correct array initialization that will display the corresponding output.

val array = // initalize array here
val sizes = arrayOf("byte", "kilobyte", "megabyte", "gigabyte",
            "terabyte", "petabyte", "exabyte")
for ((i, value) in array.withIndex()) {
   println("1 ${sizes[i]} = ${value.toLong()} bytes")
}

Output:

1 byte = 1 bytes
1 kilobyte = 1000 bytes
1 megabyte = 1000000 bytes
1 gigabyte = 1000000000 bytes
1 terabyte = 1000000000000 bytes
1 petabyte = 1000000000000000 bytes
1 exabyte = 1000000000000000000 bytes

Which of the statements below is the correct way to initialize the array above to give the correct output.

val array = Array(7) {1000.0.pow(it)}

Which of these options are good reasons to explicitly make a list immutable? There may be more than 1 correct answer.

*It reduces errors in general
*Prevents accidental changing of objects that were meant to be unchangeable
*In a multi-threaded environment, makes the variable thread safe,
because once it has been assigned by the initial thread, no thread can change it.


--Practice Time
Looping over arrays and lists is a fundamental technique that has a lot of flexibility in Kotlin. Let's practice.

Basic example
Create an integer array of numbers called numbers, from 11 to 15.
Create an empty mutable list for Strings.
Write a for loop that loops over the array and adds the string representation of each number to the list.
Challenge example
How can you use a for loop to create (a list of) the numbers between 0 and 100 that are divisible by 7?

var list3 : MutableList<Int> = mutableListOf()
for (i in 0..100 step 7) list3.add(i)
print(list3)
[0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98]

o

for (i in 0..100 step 7) println(i.toString() + " - ")
