Practice Time
Create a program that suggests an activity based on various parameters.

Start in a new file with a main function.
From main(), create a function, whatShouldIDoToday().
Let the function have three parameters.
mood: a required string parameter
weather: a string parameter that defaults to "sunny"
temperature: an Integer parameter that defaults to 24 (Celsius).
Use a when construct to return some activities based on combinations of conditions. For example:

mood == "happy" && weather == "Sunny" -> "go for a walk"
else -> "Stay home and read."

Copy/paste your finished function into REPL, and call it with combinations of arguments. For example:

whatShouldIDoToday("sad")
> Stay home and read.

Resp

fun main(args: Array<String>) {
   println(whatShouldIDoToday("happy"))
}

fun whatShouldIDoToday(mood: String, weather: String = "sunny", temperature: Int = 24) : String {
   return when {
      mood == "happy" && weather == "Sunny" -> "go for a walk"
      else -> "Stay home and read."
   }
}


// listas

---Practice Time
   You can do the following filter exercise in REPL.
   Create a list of spices, as follows:

   val spices = listOf("curry", "pepper", "cayenne", "ginger", "red curry", "green curry", "red pepper" )

   --Create a filter that gets all the curries and sorts them by string length.
   * Hint: After you type the dot (.), IntelliJ will give you a list of functions you can apply.
   --Filter the list of spices to return all the spices that start with 'c' and end in 'e'. Do it in two different ways.
   --Take the first three elements of the list and return the ones that start with 'c'.
   *Note: We will be able to do a lot more interesting stuff with filters after you learn about classes and Map.

   Resp
--Sorting curries by string length

spices.filter { it.contains("curry") }.sortedBy { it.length }

--Filtering by those that start with 'c' and end with 'e'

spices.filter{it.startsWith('c')}.filter{it.endsWith('e')}
> [cayenne]

OR

spices.filter { {it.startsWith('c') && it.endsWith('e') }
> [cayenne]

--Filtering the first 3 items by 'c'

spices.take(3).filter{it.startsWith('c')}
> [curry, cayenne]


//Lambdas
siempre empiezan y terminan con { }, siempre y cuando sea una funcion se puede llamar

What is the difference between

val random1 = random()
val random2 = {random()}

***The second will generate a random number every time random2 is accessed


Well Done!

random1 has a value assigned at compile time, and the value never changes when the variable is accessed.

random2 has a lambda assigned at compile time, and the lambda is executed every time the variable
is referenced, returning a different value.


Practice Time: Lambdas
--Create a lambda and assign it to rollDice, which returns a dice roll (number between 1 and 12).
--Extend the lambda to take an argument indicating the number of sides of the dice used for the roll.
--If you haven't done so, fix the lambda to return 0 if the number of sides passed in is 0.
--Create a new variable, rollDice2, for this same lambda using the function type notation.

1. val rollDice = { Random().nextInt(12) + 1}
2. val rollDice = { sides: Int ->
       Random().nextInt(sides) + 1
   }

3. val rollDice0 = { sides: Int ->
       if (sides == 0) 0
       else Random().nextInt(sides) + 1
   }

4. val rollDice2: (Int) -> Int = { sides ->
       if (sides == 0) 0
       else Random().nextInt(sides) + 1
   }

 Practice Time: Extra Questions
   --Why would you want to use the function type notation instead of just the lambda?
   --Create a function gamePlay() that takes a roll of the dice as an argument and prints it out.
  -- Pass your rollDice2 function as an argument to gamePlay() to generate a dice roll every time gamePlay() is called.

resp

gamePlay(rollDice2(4))
fun gamePlay(diceRoll: Int){
   // do something with the dice roll
   println(diceRoll)
}